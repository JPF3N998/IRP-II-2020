from matplotlib import pyplot as plt
import os
from os import listdir, getcwd
import numpy as np
import cv2 as cv
import numpy as np

def snipHorizontal(img):
    crops = []
    height = img.shape[0]
    y = 0

    while(y < height):
        if(not freeHorizontal(img, y)):
            upperSnipY = upperSnip(img, y)
            bottomSnipY = bottomSnip(img, y)
            
            if(upperSnipY == -1 or bottomSnipY == -1):
                print("Error")
            else:
                crops.append((upperSnipY, bottomSnipY))
                y = bottomSnipY
            
                
        y += 1

    return crops

def freeHorizontal(img, y):
    width = img.shape[1]

    for x in range(0, width):
        if(img[y][x] <= pivoteColor):
            return False
        
    return True

def upperSnip(img, firstY):

    for y in range(0, firstY):
        y = firstY - y
        if(freeHorizontal(img, y)):
            return y

    return -1#no debería ocurrir

def bottomSnip(img, firstY):
    height = img.shape[0]

    for y in range(firstY, height):
        if(freeHorizontal(img, y)):
            return y

    return -1

def snipVertical(img):
    crops = []
    width = img.shape[1]

    x = 0

    while(x < width):
        if(not freeVertical(img, x)):
            leftSnipX = leftSnip(img, x)
            rightSnipX = rightSnip(img, x)
            
            if(leftSnipX == -1 or rightSnipX == -1):
                print("Error")
            else:
                crops.append((leftSnipX, rightSnipX))
                x = rightSnipX
                
        x += 1
    return crops

def freeVertical(img, x):
    height = img.shape[0]

    for y in range(0, height):
        if(img[y][x] <= pivoteColor):
            return False
        
    return True

def leftSnip(img, firstX):

    for x in range(0, firstX):
        x = firstX - x
        if(freeVertical(img, x)):
            return x

    return -1#no debería ocurrir

def rightSnip(img, firstX):
    width = img.shape[1]

    for x in range(firstX, width):
        if(freeVertical(img, x)):
            return x

    return -1

def cropFila(img, crop):
    width = img.shape[1]
    
    return img[crop[0]: crop[1], 0: width - 1]

def cropColumn(img, crop):
    height = img.shape[0]
    
    return img[0: height - 1, crop[0]: crop[1]]

def cropNumbers(img):
    dataset = []

    crops = snipHorizontal(img)#cortes por fila

    filas = []
    for crop in crops:
        filas.append(cropFila(img, crop))

    for fila in filas:
        crops = snipVertical(fila)#cortes de cada fila por número
        
        for crop in crops:
            numero = cropColumn(fila, crop)
            numero = crop_image(numero)
            dataset.append(numero)#cortes por número
            
    return dataset

def writeDataset(dataset, saveFolder):
    i = 30
    for image in dataset:
        cv.imwrite(saveFolder + "0" + str(i) + ".jpg", cv.resize(image, resizeDim, interpolation = cv.INTER_AREA))
        i += 1

def plotImage(img):
    plt.figure(figsize=(5, 5))
    plt.subplot(1,1,1)
    plt.imshow(img, cmap = 'gray')
    plt.title('Original')
    plt.show()

def getHorizontalHist(number):
    width = number.shape[1]
    height = number.shape[0]
    
    hist = []
    for y in range(height):
        pixelCount = 0
        for x in range(width):
            if(number[y][x] <= pivoteColor):
                pixelCount += 1
                
        hist.append(pixelCount)

    return hist

def getVerticalHist(number):
    width = number.shape[1]
    height = number.shape[0]
    
    hist = []
    for x in range(width):
        pixelCount = 0
        for y in range(height):    
            if(number[y][x] <= pivoteColor):
                pixelCount += 1
                
        hist.append(pixelCount)

    return hist

#recuperado de
#https://codereview.stackexchange.com/questions/132914/crop-black-border-of-image-using-numpy/132934
def crop_image(img, tol = 80):
    # img is 2D image data
    # tol  is tolerance
    mask = img < tol
    return img[np.ix_(mask.any(1),mask.any(0))]

def getHist4x4(number, pixelWindow):
    width = number.shape[1]
    height = number.shape[0]

    if(width % pixelWindow != 0 or height % pixelWindow != 0):
        newDim = (int(width / pixelWindow) * pixelWindow, int(height / pixelWindow) * pixelWindow)
        number = cv.resize(number, newDim, interpolation = cv.INTER_AREA)

    hist = getHorizontalHist(number) + getVerticalHist(number)
    resumedHist = []

    for i in range(0, len(hist), pixelWindow):
        pixelCount = 0
        for j in range(i, i + pixelWindow):
            pixelCount += hist[j]

        resumedHist.append(pixelCount)
    
    return resumedHist

def readAndCropImage(img, saveFolder):
    ret, img = cv.threshold(img, 127, 255, cv.THRESH_BINARY)#se convierte a una imagen binaria 0 | 255
    dataset = cropNumbers(img)
    writeDataset(dataset, saveFolder)

def getHistsPromAndVariance(hists):

    prom = [0] * len(hists[0])

    for hist in hists:
        prom = np.add(prom, hist)

    prom = np.true_divide(prom, len(hists))

    variance = [0] * len(hists[0])
    for hist in hists:
        variance += np.abs(np.subtract(hist, prom))

    variance = np.true_divide(variance, len(hists))

    return np.around(prom, decimals = 4).tolist(), np.around(variance, decimals = 4).tolist()

def evalNumber(number, prom, variance):
    #pre procesamiento
    ret, number = cv.threshold(number, 127, 255, cv.THRESH_BINARY)#se convierte a una imagen binaria 0 | 255
    number = crop_image(number)
    number = cv.resize(number, resizeDim, interpolation = cv.INTER_AREA)

    histNumber = getHist4x4(number, pixelWindowForHist)

    distances = []

    for hist in prom:
        dist = np.linalg.norm(np.array(histNumber) - np.array(hist))
        distances.append(dist)

    i = 0
    while(i < 10):
        predictedNumber = distances.index(min(distances))
        threshold = np.linalg.norm(np.array(variance[predictedNumber]) - np.array(prom[predictedNumber]))

        if(min(distances) <= threshold):
            break
        else:
            distances[predictedNumber] = float('inf')

        i += 1

    print("El número es:", predictedNumber)
    plotImage(number)
    return predictedNumber

def readNumbers(readFolder):
    cwd = os.getcwd()
    pathTrain = cwd + "/" + readFolder
    trainFiles = os.listdir(path=pathTrain)

    hists = []
    for imageName in trainFiles:
        number = cv.imread(readFolder + imageName, 0)
        number = cv.resize(number, resizeDim, interpolation = cv.INTER_AREA)
        hists.append(getHist4x4(number, pixelWindowForHist))

    return hists

def generate_sub_dataset(readFolder, saveFolder, numberToRead):
    readFolder = readFolder + numberToRead 
    saveFolder = saveFolder + numberToRead + "/"
    readAndCropImage(cv.imread(readFolder + "/" + numberToRead + ".jpg", 0), saveFolder)

pivoteColor = 200
resizeDim = (50, 150)#imagenes de 100 x 100 para los números individuales
pixelWindowForHist = 4
resizeDim = (int(resizeDim[0] / pixelWindowForHist) * pixelWindowForHist,
             int(resizeDim[1] / pixelWindowForHist) * pixelWindowForHist)

"""
#saca los promedios de los números
promHists = []
varHists = []
for i in range(0, 10):
    promI, varI = getHistsPromAndVariance(readNumbers(str(i) + "/"))
    promHists.append(promI)
    varHists.append(varI)

print(promHists)
print("---------------------------")
print(varHists)
"""

#Predice un número con el arreglo de histogramas
prom = [[39.8417, 71.525, 86.7333, 91.6833, 95.425, 90.8, 83.0833, 75.575, 68.4417, 62.175, 57.45, 54.0417, 51.3583, 49.575, 47.7417, 46.7833, 45.5417, 44.0833, 43.0417, 42.9167, 43.2, 44.0667, 45.0417, 46.6417, 48.0167, 50.275, 52.8167, 56.3417, 60.8333, 65.85, 74.25, 83.7083, 90.5917, 94.5083, 
96.6833, 82.775, 49.75, 236.4, 288.7083, 208.0917, 172.9, 151.1, 145.8667, 150.525, 163.225, 165.825, 186.8333, 253.075, 210.6167], [73.4417, 99.85, 111.7417, 118.05, 120.575, 122.925, 124.8667, 126.3083, 128.3333, 127.8083, 127.1917, 127.25, 127.0417, 128.05, 127.125, 126.8, 126.0417, 124.6583, 123.8583, 122.9667, 121.5667, 121.9667, 122.3083, 122.9167, 123.35, 122.5083, 121.35, 122.375, 122.1167, 121.425, 119.4083, 117.0167, 114.3667, 111.5583, 107.075, 98.5083, 75.9, 116.6583, 179.4167, 302.5917, 398.7, 458.1167, 513.9417, 531.2333, 517.7667, 491.7917, 413.6, 278.2417, 178.5417], [38.0333, 60.1333, 63.525, 64.9, 65.025, 59.325, 52.9083, 47.2083, 41.6083, 34.775, 30.1167, 26.3583, 23.775, 22.7667, 22.4667, 22.5333, 22.9917, 23.4, 23.25, 23.75, 25.4167, 29.5917, 35.9, 43.6417, 49.8, 52.3333, 50.6167, 50.0667, 52.75, 59.825, 73.5667, 92.5333, 110.5917, 116.3, 108.0, 87.7833, 49.5917, 103.8333, 159.4333, 181.3583, 191.625, 198.8, 211.85, 236.525, 235.2167, 148.8333, 82.4417, 61.2167, 46.025], [53.325, 92.2333, 93.3583, 87.2167, 76.8667, 62.6417, 47.925, 39.3333, 33.9333, 32.5917, 33.175, 36.8417, 40.8167, 45.6167, 51.4667, 58.225, 64.0167, 70.0167, 71.5333, 67.0167, 56.025, 44.4167, 35.625, 31.0333, 29.4417, 29.6083, 31.5583, 36.025, 42.05, 47.7, 54.625, 65.5333, 80.1417, 97.55, 109.9417, 100.7583, 63.525, 62.2833, 97.9167, 120.1583, 144.0333, 168.6083, 193.0167, 222.5167, 249.5583, 251.275, 235.3083, 225.8167, 143.2167], [19.8417, 32.8333, 41.7167, 46.8583, 50.4167, 52.7583, 54.0833, 55.1083, 55.85, 55.4583, 55.5833, 56.1333, 59.4917, 65.85, 76.4, 92.4417, 105.95, 109.7583, 100.1833, 83.9333, 63.5417, 48.075, 40.2583, 35.2333, 30.5333, 27.8083, 26.6, 26.5333, 26.35, 26.4083, 26.0167, 26.1833, 26.2167, 26.125, 25.525, 24.125, 18.475, 136.7583, 188.2833, 140.075, 83.1583, 58.75, 54.775, 62.9, 108.125, 177.4583, 254.725, 313.0667, 216.5833], [54.3917, 87.3333, 96.8917, 96.8, 82.85, 64.4833, 48.7667, 33.4083, 27.4583, 25.625, 26.4583, 28.3667, 31.6583, 40.8833, 52.7333, 64.5083, 73.6083, 77.8083, 78.0917, 72.8167, 62.2833, 47.7083, 36.85, 30.4667, 27.25, 26.4, 27.85, 32.05, 36.65, 42.975, 51.9667, 66.0417, 76.6833, 85.0, 87.8667, 82.9083, 55.5833, 94.35, 176.9667, 222.9333, 222.5583, 184.9917, 164.5917, 170.5417, 180.025, 186.9333, 186.0167, 153.275, 98.2917], [28.0, 41.6833, 48.0583, 49.925, 47.7333, 43.2417, 40.9583, 39.425, 37.9833, 37.2, 36.4083, 35.7417, 35.4417, 35.5333, 36.1667, 37.675, 41.55, 52.4167, 71.1417, 92.675, 105.45, 110.5, 107.9667, 101.4417, 93.0167, 85.675, 79.6667, 76.1417, 75.7417, 77.9917, 82.2917, 91.0333, 104.1833, 112.675, 114.325, 96.7333, 58.3583, 211.8833, 347.2333, 303.225, 230.55, 203.375, 181.9417, 164.4917, 158.2583, 156.6667, 173.3, 202.5667, 128.6583], [56.6333, 113.4833, 137.7583, 124.9917, 98.6417, 72.5917, 48.725, 34.25, 31.275, 30.1917, 29.7667, 29.6833, 30.0667, 31.4083, 34.375, 37.4917, 46.0583, 62.0333, 81.2417, 101.5, 101.8, 85.0917, 64.9417, 48.3917, 39.0917, 34.7083, 31.0167, 29.3583, 29.1, 29.0833, 28.875, 29.175, 28.8917, 28.175, 27.4167, 25.6083, 
19.4083, 47.9083, 70.8583, 95.2333, 125.975, 162.4833, 189.275, 225.1167, 245.5917, 225.85, 216.075, 192.8, 115.1333], [51.85, 84.6, 92.275, 91.9417, 81.55, 74.0667, 68.325, 63.3083, 60.2333, 59.525, 60.7083, 65.2333, 72.1583, 79.6, 85.8583, 90.9833, 94.1667, 92.85, 91.5417, 89.35, 81.375, 72.7083, 65.825, 60.8917, 58.4583, 55.8833, 54.8, 55.7, 56.7, 60.3583, 65.075, 70.3167, 79.5667, 94.0917, 99.725, 95.9167, 62.8583, 124.7, 239.0, 280.8167, 274.5833, 235.1833, 202.7, 202.0833, 224.8583, 256.4083, 283.25, 271.6167, 145.175], [52.2333, 85.3917, 97.7, 98.7833, 95.5333, 84.0333, 76.475, 72.45, 69.75, 69.225, 70.25, 72.9, 77.3, 84.225, 91.3917, 99.6417, 103.1833, 99.375, 92.5, 82.0833, 67.9333, 51.8917, 43.3333, 39.775, 36.7167, 34.4417, 34.25, 33.825, 33.8417, 33.65, 34.15, 34.5667, 35.45, 35.6667, 34.8333, 31.4667, 22.3, 121.2417, 193.7833, 180.1167, 146.4083, 134.6167, 132.4333, 134.7167, 150.15, 198.5417, 321.5333, 400.7333, 198.2417]]

variance = [[166.1499, 186.7994, 229.4622, 476.4997, 678.861, 760.3933, 811.1097, 730.261, 608.4299, 463.2444, 373.3975, 277.2233, 235.8799, 206.5444, 169.5083, 148.6697, 129.8316, 109.6764, 111.3899, 100.8097, 
95.81, 103.5456, 112.7733, 137.6299, 149.4497, 195.8994, 265.4831, 381.6083, 477.6389, 596.9775, 862.6542, 1038.7399, 1001.4749, 568.4166, 197.5331, 199.1077, 325.1708, 1746.8233, 5914.0066, 4537.9999, 3548.7233, 2957.9233, 2651.0822, 2014.3994, 1998.2744, 2478.111, 2946.7056, 4618.0527, 1713.5364], [648.6133, 720.4775, 757.3749, 860.7475, 866.4777, 963.386, 937.8656, 921.0799, 860.4056, 898.3049, 904.3883, 918.2542, 947.9566, 931.8142, 969.376, 858.71, 845.8066, 814.3416, 816.4383, 827.6989, 853.5956, 805.5822, 773.4299, 827.3764, 786.9108, 774.5999, 752.2275, 708.9677, 697.0197, 679.961, 650.3916, 765.4497, 679.6489, 645.7466, 671.9694, 709.9833, 760.99, 10061.7083, 13762.0097, 16415.4083, 22490.1767, 17087.2531, 12805.3549, 9705.7122, 8093.3122, 8424.7816, 10500.44, 15832.6833, 13100.1983], [238.8156, 187.9156, 389.4494, 859.09, 1166.2744, 951.6694, 776.4166, 658.3816, 501.3716, 358.041, 272.1364, 172.2299, 94.8244, 58.0456, 45.5656, 40.9156, 45.8083, 51.1733, 50.6542, 58.0042, 101.0264, 224.5416, 457.6067, 698.4799, 836.6767, 905.1056, 760.7031, 686.9456, 733.4042, 969.7444, 1496.1122, 2245.0489, 2710.6916, 1933.7267, 1251.8667, 775.9364, 423.4583, 2673.4056, 3467.5622, 4296.8966, 5188.3844, 5497.51, 6497.6442, 8723.4994, 13044.3864, 10033.3222, 3552.6466, 879.3531, 236.991], [328.236, 370.3956, 1032.7133, 2156.1697, 2615.1822, 2060.6633, 933.6027, 461.7389, 218.7122, 134.5749, 96.5944, 135.0166, 197.3664, 184.3197, 318.1156, 491.6577, 699.9331, 1070.0497, 1539.9156, 1686.8664, 1473.9577, 896.7931, 374.8177, 162.8489, 102.9466, 90.3383, 127.2799, 259.691, 377.2975, 499.66, 655.9677, 1046.8156, 1543.1383, 1255.8142, 789.7383, 504.7499, 667.4494, 694.1197, 2413.5597, 4253.0333, 4643.6322, 4168.1549, 4290.2497, 4838.9164, 8302.4466, 10524.8494, 11825.5633, 6384.0331, 1070.2031], [94.3166, 272.7056, 411.1364, 470.2883, 532.9431, 606.1333, 672.8931, 694.9966, 712.0942, 697.1483, 675.7931, 681.6156, 806.6666, 1151.1442, 1774.99, 2596.5299, 3258.7808, 3461.2666, 3778.6331, 3383.4789, 2560.8649, 1680.7694, 1418.0916, 905.8622, 425.0656, 190.4383, 138.29, 140.2322, 137.9608, 137.8583, 138.1831, 138.9664, 131.3531, 125.6594, 109.7327, 89.4427, 50.3327, 2953.9166, 10666.3697, 11106.8194, 4526.5999, 1628.5208, 1098.3577, 2426.2567, 10184.6594, 21680.0483, 31783.2494, 
24376.4956, 11386.3597], [763.6549, 1567.8222, 2656.4799, 3056.3433, 2873.6442, 2438.6164, 1524.2622, 514.5583, 182.7316, 112.401, 155.1316, 224.7489, 388.2749, 672.2697, 1008.4789, 1443.8499, 1762.8549, 1990.4383, 2259.6499, 2272.1664, 1947.5697, 1127.6733, 504.9775, 216.1656, 125.6208, 113.99, 147.2775, 263.0475, 398.1275, 572.741, 963.3156, 1727.1066, 1876.8497, 1658.5, 1165.0822, 444.2999, 409.4931, 4266.7942, 16186.1156, 13248.0956, 9313.5799, 7160.1583, 7429.4249, 7530.1149, 8028.4077, 8028.7622, 8435.6997, 5931.9827, 2056.4899], [115.8667, 370.1664, 685.4216, 860.2027, 579.3456, 311.4499, 199.5733, 142.661, 88.4997, 59.2933, 46.5749, 50.4583, 44.6133, 44.9989, 104.6389, 199.0027, 519.1142, 953.0597, 1484.0216, 1556.286, 1455.8808, 1319.2667, 1130.7822, 863.8799, 747.9664, 604.986, 456.1722, 363.1883, 336.1916, 337.4083, 407.8066, 655.5489, 991.6664, 696.6027, 266.1027, 229.2456, 382.4466, 4303.6697, 3080.7456, 4023.6077, 4684.1808, 8259.151, 7618.8883, 5825.7999, 4505.3916, 3418.6389, 2809.26, 1441.3789, 936.7416], [1161.2322, 1712.2331, 1152.6333, 2775.4916, 4203.2966, 3281.0583, 1524.116, 460.7875, 215.566, 94.3383, 99.8456, 103.9164, 115.5289, 171.0083, 394.5344, 586.8333, 1021.9216, 1614.6156, 1637.9166, 1849.7333, 1952.4433, 2275.2499, 2052.8383, 1576.5716, 987.4333, 565.9733, 219.1664, 106.0466, 85.19, 79.1597, 80.1427, 84.9777, 78.1799, 72.3277, 72.5764, 69.9383, 40.8083, 303.6166, 1132.4049, 3005.0122, 6241.9244, 8790.3331, 8671.566, 8991.8531, 11988.6249, 14098.9942, 24480.3694, 39455.51, 16135.8822], [332.4942, 377.1733, 367.3994, 547.1383, 544.9308, 509.5122, 450.7527, 344.4799, 230.9956, 190.9494, 204.3566, 301.2622, 490.7999, 677.0733, 625.3716, 738.1831, 779.7222, 716.3442, 770.4316, 867.8442, 795.6844, 635.4733, 421.7777, 263.8633, 198.7149, 152.5697, 127.86, 131.6767, 148.7767, 245.5633, 397.7527, 498.8497, 731.7956, 1116.6499, 618.116, 245.9764, 366.9549, 1629.51, 9506.0833, 10917.1664, 4338.9764, 3276.7997, 2498.41, 2328.2431, 2290.9216, 3167.4749, 5877.1042, 6057.2697, 2264.761], [208.2289, 182.0549, 454.86, 1065.1031, 1158.2989, 675.9489, 449.116, 369.9142, 263.8542, 275.3744, 413.1375, 639.6067, 766.0767, 977.3577, 1126.1383, 1197.7633, 1028.3331, 1295.0677, 2014.55, 2396.6764, 1952.3956, 1182.0966, 737.7722, 545.691, 308.1697, 161.0799, 132.8708, 116.0944, 119.8166, 119.5442, 126.3608, 156.4456, 201.5975, 193.2056, 157.5222, 83.0656, 37.01, 973.7499, 1896.3697, 5418.0864, 4459.0583, 4336.7531, 4861.5122, 5044.2531, 6166.9775, 8593.2816, 10970.9489, 12309.6122, 11483.6333]]

dvs = [[10.0864, 10.775, 12.2289, 18.1414, 22.5375, 23.8567, 23.4167, 21.5496, 19.0428, 15.6208, 13.6917, 12.6972, 11.6549, 10.9492, 9.9121, 9.4536, 9.2111, 8.6389, 8.791, 8.2986, 7.85, 8.47, 8.859, 9.7964, 10.2172, 11.2675, 12.7378, 14.7864, 
17.0333, 19.7142, 25.2667, 29.3271, 29.4583, 21.2414, 11.2658, 11.3658, 14.8458, 32.9567, 65.4674, 56.9917, 52.405, 49.8633, 43.9667, 36.9504, 35.2492, 40.57, 43.3167, 55.4312, 33.0731], [19.3912, 20.9208, 21.9422, 23.7175, 23.4587, 24.4583, 24.4789, 24.3519, 23.6333, 24.2275, 24.6225, 24.65, 24.6889, 23.6017, 24.8625, 23.16, 22.8208, 22.8035, 23.2011, 23.0672, 23.3572, 22.7833, 22.3147, 22.8875, 22.11, 21.766, 21.3717, 20.3583, 20.4206, 20.5821, 19.4515, 21.1503, 19.8283, 19.3637, 19.0967, 19.8188, 22.3367, 72.4343, 95.2806, 106.5083, 124.5067, 103.61, 80.6326, 64.95, 66.4444, 75.6201, 84.42, 102.6457, 88.5653], [12.6889, 11.0867, 15.5621, 24.01, 29.5908, 26.8087, 24.2478, 22.4313, 19.5583, 16.3358, 12.9272, 9.58, 7.11, 6.2461, 5.6678, 5.4911, 5.6428, 6.0733, 6.2125, 6.45, 7.7778, 11.3872, 17.305, 23.8188, 26.74, 27.1833, 24.6333, 22.8656, 23.9625, 27.765, 33.0628, 38.0644, 44.6856, 37.4283, 27.0833, 21.6247, 16.4736, 44.5139, 48.6522, 56.6024, 60.5938, 60.5533, 70.0458, 79.3971, 99.6689, 84.2306, 39.159, 20.1464, 12.5592], [14.1029, 14.8372, 26.9404, 42.0536, 46.3078, 38.9392, 25.6754, 17.2833, 11.0211, 8.8872, 7.9179, 9.5065, 10.5286, 10.8231, 13.97, 18.105, 22.5006, 28.7153, 35.6056, 37.8178, 32.2329, 22.6236, 13.4771, 9.2417, 7.6967, 7.6721, 8.5808, 12.3954, 15.5908, 18.4133, 20.6708, 25.49, 32.7033, 30.7742, 21.3965, 17.1847, 19.4379, 21.1092, 38.2986, 52.8313, 57.2589, 54.2663, 54.4519, 56.8119, 73.0514, 83.1008, 96.0878, 65.9392, 22.9253], [7.1504, 13.7056, 17.6286, 18.9679, 20.1833, 21.5917, 22.35, 22.8935, 23.255, 22.8264, 22.4139, 22.24, 24.0419, 27.595, 34.48, 44.7378, 51.0325, 51.9285, 55.0908, 51.1333, 42.9167, 30.4358, 23.7907, 18.3828, 13.4378, 10.9378, 9.89, 9.9989, 9.855, 9.7447, 9.6831, 9.9136, 9.6964, 9.6833, 9.0058, 8.0188, 5.7108, 41.6968, 86.7292, 94.1967, 54.2453, 26.625, 22.6267, 32.42, 83.8583, 131.6118, 155.6054, 133.1478, 90.3764], [22.3178, 34.0667, 46.321, 49.1867, 48.2408, 43.3053, 32.5017, 17.021, 10.3854, 8.9479, 8.7674, 9.405, 11.7672, 19.2611, 25.53, 31.9843, 36.4417, 39.475, 42.3219, 42.6303, 37.8686, 27.1854, 17.0833, 10.6522, 8.1833, 8.37, 9.5767, 12.9375, 16.4242, 20.0533, 25.66, 34.9826, 37.9403, 36.3167, 29.6633, 16.1447, 15.3014, 54.9808, 115.5311, 99.1611, 80.3785, 71.8582, 73.5182, 73.134, 75.3917, 74.8656, 78.9486, 69.6404, 38.7917], [8.0167, 15.8769, 22.2425, 25.0346, 19.3022, 13.8814, 11.2694, 9.4604, 7.6172, 6.3633, 5.4886, 5.8836, 5.4289, 5.3167, 6.0028, 7.9937, 13.9508, 23.5597, 33.8797, 32.6462, 31.5292, 29.15, 28.5172, 24.4583, 22.3492, 20.72, 18.3167, 15.8462, 14.9739, 14.8239, 16.1924, 22.12, 28.8017, 23.3529, 12.8425, 11.8344, 16.169, 52.5108, 44.5706, 53.0438, 56.5725, 80.5792, 77.8113, 68.101, 60.7331, 51.2667, 42.9383, 30.5617, 24.4644], [27.6994, 35.3172, 28.5957, 44.9096, 59.775, 51.7569, 30.3696, 12.8667, 9.31, 7.9282, 8.3333, 8.4947, 9.0533, 10.1689, 13.3646, 16.3389, 23.7826, 33.1578, 35.1543, 36.675, 37.0167, 42.9083, 39.6319, 30.0679, 19.3057, 14.1521, 9.6847, 8.425, 8.0317, 7.9319, 7.8229, 7.9867, 7.6178, 7.3121, 7.2583, 6.8525, 5.125, 14.8022, 25.3704, 40.5189, 63.9, 80.1789, 79.0587, 75.4803, 89.2879, 92.1142, 128.0375, 168.17, 99.2544], [12.8725, 13.9267, 14.6325, 19.1485, 18.0775, 16.2433, 15.0846, 12.9622, 11.6039, 10.6083, 11.0083, 12.9106, 16.6286, 20.1367, 19.9346, 22.8153, 23.6611, 22.9767, 24.0965, 25.8892, 23.275, 19.2174, 15.2504, 12.2376, 10.8139, 9.5753, 8.5433, 8.85, 9.615, 12.2643, 15.4492, 18.0992, 22.5783, 30.0962, 21.075, 12.0472, 15.2679, 30.9217, 82.7833, 87.1439, 54.1931, 45.6878, 41.4917, 40.8181, 39.5131, 45.1219, 61.0292, 65.9653, 38.6013], [11.5922, 10.5446, 16.6017, 28.7644, 30.7233, 22.135, 17.105, 15.4433, 13.4958, 14.0417, 15.7042, 18.7333, 20.9667, 24.5071, 26.6497, 28.3379, 26.7514, 29.0104, 39.3333, 45.2361, 39.05, 26.6799, 17.3944, 13.7154, 11.4692, 9.8936, 9.6542, 9.2367, 9.461, 9.4442, 9.4292, 10.2567, 11.1508, 10.3778, 9.6694, 6.8133, 4.7583, 25.0968, 37.7667, 68.5981, 57.675, 55.0078, 58.1344, 58.6506, 65.1092, 80.0167, 89.3322, 93.1044, 87.1658]]
for i in range(0, 10):
    number = cv.imread(str(i) + ".jpg", 0)
    evalNumber(number, prom, dvs)




"""
{
    number = cv.imread("0.jpg", 0)
    hists = getHist4x4(number)

    print(hists)

    plt.figure(figsize=(8, 5))
    plt.subplot(1,1,1)
    plt.subplot(131)
    plt.bar([1, 2, 3, 4], np.array(hists[0]))
    plt.subplot(132)
    plt.bar([1, 2, 3, 4], np.array(hists[1]))
    plt.title('Original')
    plt.show()

    a = []
    for i in range(0, 10):
        a.append(getHist4x4(cv.imread(str(i) + ".jpg", 0)))
    print(a)
    print()
}
"""